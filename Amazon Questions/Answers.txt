Find first unique character in a string -- O(N) where N is the characters in the string
--------------------------------------------------------------------------------------

# use an integer (32 bits out of which only 26 are used) to OR bits when the indexed character
# is found and delte them from the hashTable
# use an additional integer to mark the duplicate ones .. (when they are repeated more than twice,
# we can check the mark bits to not re-enter into the hashTable)

for character in string:
	if integer & (1 << (ord(character) - 96)) != 0:
		// duplicate character
		integer2 = integer2 | (1 << ord(character) - 96) // flag the character index in another integer
		array.remove(character)
	else
		integer = integer | (1 << ord(character) - 96)
		if integer2 & (1 << (ord(character) - 96)) != 0:
			array.add(character)


Find least common ancestor of two nodes
-----------------------------------------

1. Find level of the two given nodes
2. Find minimum between the levels in step 1
3. Go to a level 1 less than minimum level and check which node on that level has either of the two input nodes as children.

findLevel(Node root, int data, int level) // data is the input node's data
{
	if root == null
		return root

	if root.data == data
		return level;

	if root.left != NULL
		return findLevel(root.left, data, level + 1);

	if root.right != NULL
		return findLevel(root.right, data, level + 1);

}


Given a continuous stream of characters, return the first unique character
-----------------------------------------------------------------------------

# idea is to maintain two data strutures, one hash table (for quick access to DoublyLinkedList)
# hashTable stores the addrss to the node, and if duplicate character occurs, we delete the node
# in the list, as well as the address in the hashTable.

# What do we do if we need the most repeating character in the stream? Should we add the time of
# each character and then implement an LRU list?

for character : stream:
	if character not in hashTable:
		DoublyLinkedListNode node = new DoublyLinkedListNode(character)
		hashTable.add(character, node);
		if (firstCharacterReceived)
			head = end = node
		else
			end.next = node
			node.prev = end;
			node.next = NULL
			end = node
	else:
		hashTable[character] = NULL
		if node is head:
			head = head.next;
		elif node is end:
			end = end.prev
		else:
			node.prev.next = node.next

	return head;


Given an Microsoft Excel string, return the column's number
-------------------------------------------------------------

# the strings are in base-26 numbering
# ingeniuous !! 

length = str.length() - 1
int count = 0
while (length >= 0)
{
	char = str.charAt(length)
	sum = sum + (Math.pow(26, count) * (ord(character) - 96))

	count ++;
	length --;
}

